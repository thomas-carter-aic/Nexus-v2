version: '3.8'

services:
  # MLflow for Model Lifecycle Management
  mlflow-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_DB: mlflow
      POSTGRES_PASSWORD: mlflow-password
    volumes:
      - mlflow-db-data:/var/lib/postgresql/data
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 30s
      timeout: 30s
      retries: 3

  mlflow-server:
    image: python:3.11-slim
    depends_on:
      mlflow-db:
        condition: service_healthy
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow-password@mlflow-db:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_HOST=0.0.0.0
      - MLFLOW_PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
      - ./mlflow-requirements.txt:/tmp/requirements.txt
    command: >
      bash -c "
        pip install -r /tmp/requirements.txt &&
        mlflow server 
          --backend-store-uri postgresql://mlflow:mlflow-password@mlflow-db:5432/mlflow
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Jupyter Lab for Data Science
  jupyter-lab:
    image: jupyter/tensorflow-notebook:latest
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=nexus-jupyter-token
    ports:
      - "8888:8888"
    volumes:
      - jupyter-workspace:/home/jovyan/work
      - ./notebooks:/home/jovyan/work/notebooks
    networks:
      - nexus-net

  # MinIO for Model Artifacts Storage
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=nexus-minio
      - MINIO_ROOT_PASSWORD=nexus-minio-password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis for ML Caching
  redis-ml:
    image: redis:7.2-alpine
    command: redis-server --requirepass nexus-ml-password
    ports:
      - "6380:6379"
    volumes:
      - redis-ml-data:/data
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Serving with TensorFlow Serving
  tensorflow-serving:
    image: tensorflow/serving:latest
    environment:
      - MODEL_NAME=nexus-model
      - MODEL_BASE_PATH=/models
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC API
    volumes:
      - tf-models:/models
    networks:
      - nexus-net

  # NVIDIA Triton Inference Server (if GPU available)
  triton-server:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    ports:
      - "8000:8000"  # HTTP
      - "8001:8001"  # gRPC
      - "8002:8002"  # Metrics
    volumes:
      - triton-models:/models
    command: tritonserver --model-repository=/models --allow-http=true --allow-grpc=true --allow-metrics=true
    networks:
      - nexus-net
    # Uncomment if you have NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Vector Database (Qdrant) for Embeddings
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow for ML Workflows
  airflow-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_DB: airflow
      POSTGRES_PASSWORD: airflow-password
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    networks:
      - nexus-net

  airflow-init:
    image: apache/airflow:2.7.0
    depends_on:
      - airflow-db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow-password@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=
      - AIRFLOW__WEBSERVER__SECRET_KEY=nexus-airflow-secret
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@nexus.ai
      "
    networks:
      - nexus-net

  airflow-webserver:
    image: apache/airflow:2.7.0
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow-password@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=
      - AIRFLOW__WEBSERVER__SECRET_KEY=nexus-airflow-secret
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: airflow webserver
    networks:
      - nexus-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.0
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow-password@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: airflow scheduler
    networks:
      - nexus-net

volumes:
  mlflow-db-data:
  mlflow-artifacts:
  jupyter-workspace:
  minio-data:
  redis-ml-data:
  tf-models:
  triton-models:
  qdrant-data:
  airflow-db-data:

networks:
  nexus-net:
    external: true
