services:
  # PostgreSQL for Kong
  kong-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong-password
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - auth-net

  # PostgreSQL for Keycloak
  keycloak-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_DB: keycloak
      POSTGRES_PASSWORD: keycloak-password
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    ports:
      - "15433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - auth-net

  # PostgreSQL for Authorization Service
  authz-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: authorization
      POSTGRES_DB: authorization
      POSTGRES_PASSWORD: authorization-password
    volumes:
      - authz-db-data:/var/lib/postgresql/data
    ports:
      - "15434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authorization"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - auth-net

  # Redis for Authorization Service
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis-password
    ports:
      - "16379:6379"
    volumes:
      - redis-data:/data
    networks:
      - auth-net

  # Kong Database Migration
  kong-migration:
    image: kong:3.4
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong-password
    networks:
      - auth-net

  # Kong Gateway
  kong:
    image: kong:3.4
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong-password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PLUGINS: bundled,prometheus
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API
      - "8002:8002"  # Admin GUI
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - auth-net

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    command: start-dev
    depends_on:
      keycloak-database:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-database:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak-password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: INFO
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin-password
    ports:
      - "8080:8080"
    networks:
      - auth-net
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;grep -q '200 OK' <&3"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 30s

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
    networks:
      - auth-net

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-auth.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - auth-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - auth-net

volumes:
  kong-db-data:
  keycloak-db-data:
  authz-db-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  auth-net:
    driver: bridge
