keycloak:
  # Keycloak configuration
  auth:
    adminUser: admin
    adminPassword: admin-password
    managementUser: manager
    managementPassword: manager-password

  # Production configuration
  production: false
  proxy: edge
  httpRelativePath: "/auth/"

  # Database configuration
  postgresql:
    enabled: true
    auth:
      username: keycloak
      password: keycloak-password
      database: keycloak
    primary:
      persistence:
        enabled: true
        size: 8Gi

  # Service configuration
  service:
    type: ClusterIP
    http:
      port: 80
    https:
      port: 443

  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: kong
    hostname: auth.002aic.local
    path: /
    annotations:
      konghq.com/strip-path: "false"
      konghq.com/preserve-host: "true"
    tls: true

  # Resource limits
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Keycloak configuration
  extraEnvVars:
    - name: KC_FEATURES
      value: "token-exchange,admin-fine-grained-authz"
    - name: KC_LOG_LEVEL
      value: "INFO"
    - name: KC_METRICS_ENABLED
      value: "true"
    - name: KC_HEALTH_ENABLED
      value: "true"

  # Custom realm configuration
  keycloakConfigCli:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/keycloak-config-cli
      tag: 5.9.0-debian-11-r7
    configuration:
      002aic-realm.json: |
        {
          "realm": "002aic",
          "enabled": true,
          "displayName": "002AIC Platform",
          "displayNameHtml": "<div class=\"kc-logo-text\"><span>002AIC Platform</span></div>",
          "registrationAllowed": true,
          "registrationEmailAsUsername": true,
          "rememberMe": true,
          "verifyEmail": true,
          "loginWithEmailAllowed": true,
          "duplicateEmailsAllowed": false,
          "resetPasswordAllowed": true,
          "editUsernameAllowed": false,
          "bruteForceProtected": true,
          "permanentLockout": false,
          "maxFailureWaitSeconds": 900,
          "minimumQuickLoginWaitSeconds": 60,
          "waitIncrementSeconds": 60,
          "quickLoginCheckMilliSeconds": 1000,
          "maxDeltaTimeSeconds": 43200,
          "failureFactor": 30,
          "defaultRoles": ["default-roles-002aic", "offline_access", "uma_authorization"],
          "requiredCredentials": ["password"],
          "passwordPolicy": "length(8) and digits(1) and lowerCase(1) and upperCase(1) and specialChars(1) and notUsername",
          "otpPolicyType": "totp",
          "otpPolicyAlgorithm": "HmacSHA1",
          "otpPolicyInitialCounter": 0,
          "otpPolicyDigits": 6,
          "otpPolicyLookAheadWindow": 1,
          "otpPolicyPeriod": 30,
          "sslRequired": "external",
          "clients": [
            {
              "clientId": "002aic-api",
              "name": "002AIC API Client",
              "description": "Client for 002AIC API access",
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "api-client-secret",
              "redirectUris": ["*"],
              "webOrigins": ["*"],
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.force.post.binding": "false",
                "saml.multivalued.roles": "false",
                "saml.encrypt": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "exclude.session.state.from.auth.response": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "tls.client.certificate.bound.access.tokens": "false",
                "saml.authnstatement": "false",
                "display.on.consent.screen": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "name": "audience-mapper",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-mapper",
                  "consentRequired": false,
                  "config": {
                    "included.client.audience": "002aic-api",
                    "id.token.claim": "false",
                    "access.token.claim": "true"
                  }
                }
              ],
              "defaultClientScopes": ["web-origins", "role_list", "profile", "roles", "email"],
              "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
            },
            {
              "clientId": "002aic-frontend",
              "name": "002AIC Frontend Client",
              "description": "Client for 002AIC Frontend applications",
              "enabled": true,
              "publicClient": true,
              "redirectUris": ["http://localhost:3000/*", "https://app.002aic.local/*"],
              "webOrigins": ["http://localhost:3000", "https://app.002aic.local"],
              "protocol": "openid-connect",
              "fullScopeAllowed": true,
              "defaultClientScopes": ["web-origins", "role_list", "profile", "roles", "email"],
              "optionalClientScopes": ["address", "phone", "offline_access", "microprofile-jwt"]
            }
          ],
          "roles": {
            "realm": [
              {
                "name": "admin",
                "description": "Platform Administrator"
              },
              {
                "name": "user",
                "description": "Platform User"
              },
              {
                "name": "developer",
                "description": "AI Developer"
              },
              {
                "name": "data-scientist",
                "description": "Data Scientist"
              },
              {
                "name": "model-manager",
                "description": "Model Manager"
              }
            ]
          },
          "groups": [
            {
              "name": "administrators",
              "path": "/administrators",
              "realmRoles": ["admin"]
            },
            {
              "name": "developers",
              "path": "/developers", 
              "realmRoles": ["developer", "user"]
            },
            {
              "name": "data-scientists",
              "path": "/data-scientists",
              "realmRoles": ["data-scientist", "user"]
            }
          ]
        }
