{{- range $service := list "authorization-service" "api-gateway-service" "user-management-service" "configuration-service" "discovery-service" "health-check-service" "model-management-service" "model-training-service" "model-deployment-service" "data-integration-service" "analytics-service" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service }}
  namespace: {{ $.Values.global.namespace | default "nexus-platform" }}
  labels:
    app: {{ $service }}
    version: {{ $.Chart.AppVersion }}
    component: microservice
    tier: {{ if contains "model" $service }}ai{{ else }}core{{ end }}
spec:
  replicas: {{ index $.Values.replicaCount (camelcase $service) | default 2 }}
  selector:
    matchLabels:
      app: {{ $service }}
  template:
    metadata:
      labels:
        app: {{ $service }}
        version: {{ $.Chart.AppVersion }}
        component: microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        kuma.io/sidecar-injection: "enabled"
    spec:
      serviceAccountName: {{ $.Values.security.serviceAccount.name | default "nexus-platform-sa" }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: {{ $service }}
        image: "{{ $.Values.image.registry }}/{{ $service }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
{{- if .Values.otel }}
env:
- name: OTEL_EXPORTER_OTLP_ENDPOINT
  value: "{{ .Values.otel.otlp.address | default "otel-collector:4317" }}"
- name: SSL_CERT_FILE
  value: "{{ .Values.otel.tls.secretMountPath | default "/etc/otel/tls/tls.crt" }}"
{{- if .Values.otel.tls }}
volumeMounts:
- name: tls
  mountPath: "{{ .Values.otel.tls.secretMountPath | default "/etc/otel/tls" }}"
  readOnly: true
{{- end }}
{{- end }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: ENVIRONMENT
          value: {{ $.Values.environment }}
        - name: LOG_LEVEL
          value: "info"
        - name: METRICS_PORT
          value: "9090"
        {{- if contains "database" $service }}
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: nexus-database-secret
              key: database-url
        {{- end }}
        {{- if contains "redis" $service }}
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: nexus-redis-secret
              key: redis-url
        {{- end }}
        {{- if contains "kafka" $service }}
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: nexus-kafka-config
              key: brokers
        {{- end }}
        {{- if contains "model" $service }}
        - name: MLFLOW_TRACKING_URI
          valueFrom:
            configMapKeyRef:
              name: nexus-mlflow-config
              key: tracking-uri
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          {{- toYaml (index $.Values.resources (camelcase $service)) | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        {{- if contains "model" $service }}
        - name: model-storage
          mountPath: /models
        {{- end }}
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      {{- if contains "model" $service }}
      - name: model-storage
        persistentVolumeClaim:
          claimName: {{ $service }}-model-storage
      {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

      {{- if and .Values.otel .Values.otel.tls }}
      volumes:
      - name: tls
        secret:
          secretName: {{ .Values.otel.tls.secretName | default "otel-collector-tls" }}
      {{- end }}
