apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-devops-init-scripts
  namespace: aic-platform
data:
  04-create-devops-databases.sql: |
    -- Create databases for DevOps services
    CREATE DATABASE runtime_db;
    CREATE DATABASE monitoring_db;
    CREATE DATABASE file_storage_db;
    CREATE DATABASE search_db;
    CREATE DATABASE deployment_db;
    
    -- Create users for DevOps services
    CREATE USER runtime_user WITH PASSWORD 'runtime_password';
    CREATE USER monitoring_user WITH PASSWORD 'monitoring_password';
    CREATE USER file_storage_user WITH PASSWORD 'file_storage_password';
    CREATE USER search_user WITH PASSWORD 'search_password';
    CREATE USER deployment_user WITH PASSWORD 'deployment_password';
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON DATABASE runtime_db TO runtime_user;
    GRANT ALL PRIVILEGES ON DATABASE monitoring_db TO monitoring_user;
    GRANT ALL PRIVILEGES ON DATABASE file_storage_db TO file_storage_user;
    GRANT ALL PRIVILEGES ON DATABASE search_db TO search_user;
    GRANT ALL PRIVILEGES ON DATABASE deployment_db TO deployment_user;
    
    -- Create extensions for DevOps services
    \c runtime_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Runtime management tables
    CREATE TABLE IF NOT EXISTS applications (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        organization_id UUID NOT NULL,
        repository_url VARCHAR(500),
        branch VARCHAR(100) DEFAULT 'main',
        dockerfile_path VARCHAR(255) DEFAULT 'Dockerfile',
        build_context VARCHAR(255) DEFAULT '.',
        environment_variables JSONB DEFAULT '{}',
        resource_requirements JSONB DEFAULT '{}',
        health_check_config JSONB DEFAULT '{}',
        status VARCHAR(50) DEFAULT 'inactive',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS deployments (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        application_id UUID NOT NULL REFERENCES applications(id) ON DELETE CASCADE,
        version VARCHAR(100) NOT NULL,
        image_tag VARCHAR(255) NOT NULL,
        environment VARCHAR(50) NOT NULL,
        namespace VARCHAR(100) NOT NULL,
        replicas INTEGER DEFAULT 1,
        status VARCHAR(50) DEFAULT 'pending',
        deployment_config JSONB NOT NULL,
        started_at TIMESTAMP DEFAULT NOW(),
        completed_at TIMESTAMP,
        created_by UUID NOT NULL
    );
    
    CREATE TABLE IF NOT EXISTS runtime_metrics (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        application_id UUID NOT NULL REFERENCES applications(id) ON DELETE CASCADE,
        metric_name VARCHAR(100) NOT NULL,
        metric_value DOUBLE PRECISION NOT NULL,
        timestamp TIMESTAMP DEFAULT NOW(),
        labels JSONB DEFAULT '{}'
    );
    
    -- Create indexes for runtime management
    CREATE INDEX idx_applications_organization_id ON applications(organization_id);
    CREATE INDEX idx_applications_status ON applications(status);
    CREATE INDEX idx_deployments_application_id ON deployments(application_id);
    CREATE INDEX idx_deployments_environment ON deployments(environment);
    CREATE INDEX idx_deployments_status ON deployments(status);
    CREATE INDEX idx_runtime_metrics_application_id ON runtime_metrics(application_id);
    CREATE INDEX idx_runtime_metrics_timestamp ON runtime_metrics(timestamp);
    
    \c monitoring_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "timescaledb" CASCADE;
    
    -- Monitoring tables
    CREATE TABLE IF NOT EXISTS alert_rules (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        query TEXT NOT NULL,
        severity VARCHAR(20) NOT NULL,
        threshold DOUBLE PRECISION,
        duration VARCHAR(20) DEFAULT '5m',
        labels JSONB DEFAULT '{}',
        annotations JSONB DEFAULT '{}',
        enabled BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS alert_instances (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        rule_id UUID NOT NULL REFERENCES alert_rules(id) ON DELETE CASCADE,
        status VARCHAR(20) NOT NULL,
        value DOUBLE PRECISION,
        labels JSONB DEFAULT '{}',
        annotations JSONB DEFAULT '{}',
        starts_at TIMESTAMP NOT NULL,
        ends_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS dashboards (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        dashboard_json JSONB NOT NULL,
        tags TEXT[],
        organization_id UUID,
        created_by UUID NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS metrics_metadata (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        metric_name VARCHAR(255) NOT NULL UNIQUE,
        description TEXT,
        unit VARCHAR(50),
        type VARCHAR(20) NOT NULL,
        labels JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- Create indexes for monitoring
    CREATE INDEX idx_alert_rules_enabled ON alert_rules(enabled);
    CREATE INDEX idx_alert_instances_rule_id ON alert_instances(rule_id);
    CREATE INDEX idx_alert_instances_status ON alert_instances(status);
    CREATE INDEX idx_alert_instances_starts_at ON alert_instances(starts_at);
    CREATE INDEX idx_dashboards_organization_id ON dashboards(organization_id);
    CREATE INDEX idx_metrics_metadata_metric_name ON metrics_metadata(metric_name);
    
    \c file_storage_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- File storage tables
    CREATE TABLE IF NOT EXISTS files (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        filename VARCHAR(255) NOT NULL,
        original_filename VARCHAR(255) NOT NULL,
        content_type VARCHAR(100) NOT NULL,
        file_size BIGINT NOT NULL,
        file_hash VARCHAR(64) NOT NULL,
        storage_backend VARCHAR(50) NOT NULL,
        storage_path VARCHAR(500) NOT NULL,
        bucket_name VARCHAR(100),
        organization_id UUID,
        uploaded_by UUID NOT NULL,
        is_public BOOLEAN DEFAULT FALSE,
        encryption_enabled BOOLEAN DEFAULT TRUE,
        virus_scan_status VARCHAR(20) DEFAULT 'pending',
        virus_scan_result JSONB,
        metadata JSONB DEFAULT '{}',
        tags TEXT[],
        expires_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS file_access_logs (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        file_id UUID NOT NULL REFERENCES files(id) ON DELETE CASCADE,
        user_id UUID,
        action VARCHAR(50) NOT NULL,
        ip_address INET,
        user_agent TEXT,
        accessed_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS file_versions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        file_id UUID NOT NULL REFERENCES files(id) ON DELETE CASCADE,
        version_number INTEGER NOT NULL,
        file_size BIGINT NOT NULL,
        file_hash VARCHAR(64) NOT NULL,
        storage_path VARCHAR(500) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- Create indexes for file storage
    CREATE INDEX idx_files_organization_id ON files(organization_id);
    CREATE INDEX idx_files_uploaded_by ON files(uploaded_by);
    CREATE INDEX idx_files_file_hash ON files(file_hash);
    CREATE INDEX idx_files_created_at ON files(created_at);
    CREATE INDEX idx_file_access_logs_file_id ON file_access_logs(file_id);
    CREATE INDEX idx_file_access_logs_accessed_at ON file_access_logs(accessed_at);
    CREATE INDEX idx_file_versions_file_id ON file_versions(file_id);
    
    \c search_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Search service tables
    CREATE TABLE IF NOT EXISTS search_indexes (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL UNIQUE,
        description TEXT,
        index_type VARCHAR(50) NOT NULL,
        engine VARCHAR(50) NOT NULL,
        settings JSONB DEFAULT '{}',
        mappings JSONB DEFAULT '{}',
        status VARCHAR(20) DEFAULT 'active',
        document_count BIGINT DEFAULT 0,
        size_bytes BIGINT DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS search_queries (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        index_name VARCHAR(255) NOT NULL,
        query_text TEXT NOT NULL,
        query_dsl JSONB,
        user_id UUID,
        results_count INTEGER,
        execution_time_ms INTEGER,
        filters JSONB DEFAULT '{}',
        sort_criteria JSONB DEFAULT '{}',
        executed_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS search_analytics (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        index_name VARCHAR(255) NOT NULL,
        query_hash VARCHAR(64) NOT NULL,
        query_count INTEGER DEFAULT 1,
        avg_execution_time_ms DOUBLE PRECISION,
        last_executed TIMESTAMP DEFAULT NOW(),
        date DATE DEFAULT CURRENT_DATE
    );
    
    -- Create indexes for search
    CREATE INDEX idx_search_indexes_name ON search_indexes(name);
    CREATE INDEX idx_search_indexes_engine ON search_indexes(engine);
    CREATE INDEX idx_search_queries_index_name ON search_queries(index_name);
    CREATE INDEX idx_search_queries_executed_at ON search_queries(executed_at);
    CREATE INDEX idx_search_analytics_index_name ON search_analytics(index_name);
    CREATE INDEX idx_search_analytics_date ON search_analytics(date);
    
    \c deployment_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Deployment service tables
    CREATE TABLE IF NOT EXISTS deployment_pipelines (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        repository_url VARCHAR(500) NOT NULL,
        branch VARCHAR(100) DEFAULT 'main',
        trigger_type VARCHAR(50) DEFAULT 'manual',
        pipeline_config JSONB NOT NULL,
        environment_config JSONB DEFAULT '{}',
        notification_config JSONB DEFAULT '{}',
        status VARCHAR(20) DEFAULT 'active',
        created_by UUID NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS deployment_executions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        pipeline_id UUID NOT NULL REFERENCES deployment_pipelines(id) ON DELETE CASCADE,
        execution_number INTEGER NOT NULL,
        trigger_type VARCHAR(50) NOT NULL,
        triggered_by UUID NOT NULL,
        commit_sha VARCHAR(40),
        branch VARCHAR(100),
        environment VARCHAR(50) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        started_at TIMESTAMP DEFAULT NOW(),
        completed_at TIMESTAMP,
        duration_seconds INTEGER,
        logs TEXT,
        artifacts JSONB DEFAULT '{}',
        rollback_execution_id UUID REFERENCES deployment_executions(id)
    );
    
    CREATE TABLE IF NOT EXISTS deployment_stages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        execution_id UUID NOT NULL REFERENCES deployment_executions(id) ON DELETE CASCADE,
        stage_name VARCHAR(100) NOT NULL,
        stage_order INTEGER NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        started_at TIMESTAMP,
        completed_at TIMESTAMP,
        duration_seconds INTEGER,
        logs TEXT,
        stage_config JSONB DEFAULT '{}'
    );
    
    -- Create indexes for deployment
    CREATE INDEX idx_deployment_pipelines_status ON deployment_pipelines(status);
    CREATE INDEX idx_deployment_executions_pipeline_id ON deployment_executions(pipeline_id);
    CREATE INDEX idx_deployment_executions_status ON deployment_executions(status);
    CREATE INDEX idx_deployment_executions_started_at ON deployment_executions(started_at);
    CREATE INDEX idx_deployment_stages_execution_id ON deployment_stages(execution_id);
    CREATE INDEX idx_deployment_stages_status ON deployment_stages(status);
