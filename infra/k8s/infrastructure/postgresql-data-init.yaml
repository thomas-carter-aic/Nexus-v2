apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-data-init-scripts
  namespace: aic-platform
data:
  03-create-data-databases.sql: |
    -- Create databases for Data services
    CREATE DATABASE user_management_db;
    CREATE DATABASE data_management_db;
    CREATE DATABASE analytics_db;
    
    -- Create users for Data services
    CREATE USER user_management_user WITH PASSWORD 'user_management_password';
    CREATE USER data_management_user WITH PASSWORD 'data_management_password';
    CREATE USER analytics_user WITH PASSWORD 'analytics_password';
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON DATABASE user_management_db TO user_management_user;
    GRANT ALL PRIVILEGES ON DATABASE data_management_db TO data_management_user;
    GRANT ALL PRIVILEGES ON DATABASE analytics_db TO analytics_user;
    
    -- Create extensions for Data services
    \c user_management_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- User management tables
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        organization_id UUID,
        role VARCHAR(50) DEFAULT 'user',
        status VARCHAR(20) DEFAULT 'active',
        email_verified BOOLEAN DEFAULT FALSE,
        last_login TIMESTAMP,
        failed_login_attempts INTEGER DEFAULT 0,
        locked_until TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS organizations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        domain VARCHAR(255),
        plan VARCHAR(50) DEFAULT 'free',
        status VARCHAR(20) DEFAULT 'active',
        settings JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS user_sessions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        session_token VARCHAR(255) UNIQUE NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS audit_logs (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id),
        action VARCHAR(100) NOT NULL,
        resource_type VARCHAR(50),
        resource_id UUID,
        details JSONB,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- Create indexes for user management
    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_users_organization_id ON users(organization_id);
    CREATE INDEX idx_users_status ON users(status);
    CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
    CREATE INDEX idx_user_sessions_expires_at ON user_sessions(expires_at);
    CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);
    CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);
    
    \c data_management_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Data management tables
    CREATE TABLE IF NOT EXISTS datasets (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        organization_id UUID NOT NULL,
        owner_id UUID NOT NULL,
        schema_definition JSONB,
        storage_location TEXT,
        storage_type VARCHAR(50) DEFAULT 's3',
        size_bytes BIGINT DEFAULT 0,
        row_count BIGINT DEFAULT 0,
        format VARCHAR(50),
        compression VARCHAR(20),
        encryption_enabled BOOLEAN DEFAULT TRUE,
        version INTEGER DEFAULT 1,
        status VARCHAR(20) DEFAULT 'active',
        tags TEXT[],
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS data_lineage (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        dataset_id UUID NOT NULL REFERENCES datasets(id) ON DELETE CASCADE,
        parent_dataset_id UUID REFERENCES datasets(id),
        transformation_type VARCHAR(50),
        transformation_details JSONB,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS data_quality_checks (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        dataset_id UUID NOT NULL REFERENCES datasets(id) ON DELETE CASCADE,
        check_type VARCHAR(50) NOT NULL,
        check_config JSONB NOT NULL,
        result JSONB,
        status VARCHAR(20) DEFAULT 'pending',
        executed_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- Create indexes for data management
    CREATE INDEX idx_datasets_organization_id ON datasets(organization_id);
    CREATE INDEX idx_datasets_owner_id ON datasets(owner_id);
    CREATE INDEX idx_datasets_name ON datasets(name);
    CREATE INDEX idx_datasets_status ON datasets(status);
    CREATE INDEX idx_datasets_created_at ON datasets(created_at);
    CREATE INDEX idx_data_lineage_dataset_id ON data_lineage(dataset_id);
    CREATE INDEX idx_data_quality_checks_dataset_id ON data_quality_checks(dataset_id);
    
    \c analytics_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "timescaledb" CASCADE;
    
    -- Analytics tables
    CREATE TABLE IF NOT EXISTS reports (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        organization_id UUID NOT NULL,
        owner_id UUID NOT NULL,
        report_type VARCHAR(50) NOT NULL,
        query_definition JSONB NOT NULL,
        visualization_config JSONB,
        schedule_config JSONB,
        status VARCHAR(20) DEFAULT 'active',
        last_executed TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS dashboards (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        organization_id UUID NOT NULL,
        owner_id UUID NOT NULL,
        layout_config JSONB NOT NULL,
        widgets JSONB DEFAULT '[]',
        sharing_config JSONB DEFAULT '{}',
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS metrics (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        metric_name VARCHAR(255) NOT NULL,
        metric_value DOUBLE PRECISION NOT NULL,
        dimensions JSONB DEFAULT '{}',
        timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
        organization_id UUID,
        source VARCHAR(100)
    );
    
    -- Convert metrics table to hypertable for time-series data
    SELECT create_hypertable('metrics', 'timestamp', if_not_exists => TRUE);
    
    -- Create indexes for analytics
    CREATE INDEX idx_reports_organization_id ON reports(organization_id);
    CREATE INDEX idx_reports_owner_id ON reports(owner_id);
    CREATE INDEX idx_dashboards_organization_id ON dashboards(organization_id);
    CREATE INDEX idx_dashboards_owner_id ON dashboards(owner_id);
    CREATE INDEX idx_metrics_name_timestamp ON metrics(metric_name, timestamp DESC);
    CREATE INDEX idx_metrics_organization_id ON metrics(organization_id);
    CREATE INDEX idx_metrics_timestamp ON metrics(timestamp DESC);
