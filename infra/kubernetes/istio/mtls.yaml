# Istio mTLS Configuration for AIC-AIPaaS
# This configuration enables mutual TLS across the service mesh

apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
---
# Namespace-specific mTLS policies
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: microservices-mtls
  namespace: microservices
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: ai-services-mtls
  namespace: ai-services
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: data-services-mtls
  namespace: data-services
spec:
  mtls:
    mode: STRICT
---
# Authorization policies for microservices
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-service-policy
  namespace: microservices
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    - source:
        namespaces: ["microservices"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/auth/*", "/health"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: app-management-policy
  namespace: microservices
spec:
  selector:
    matchLabels:
      app: app-management-service
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    - source:
        namespaces: ["microservices"]
        principals: ["cluster.local/ns/microservices/sa/auth-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/applications/*", "/health"]
  - from:
    - source:
        namespaces: ["ai-services"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/applications/*/deploy", "/api/v1/applications/*/metrics"]
---
# AI Services authorization
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ai-model-training-policy
  namespace: ai-services
spec:
  selector:
    matchLabels:
      app: model-training-service
  rules:
  - from:
    - source:
        namespaces: ["microservices"]
        principals: ["cluster.local/ns/microservices/sa/app-management-service"]
    - source:
        namespaces: ["ai-services"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT"]
        paths: ["/api/v1/models/*", "/health"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ai-inference-policy
  namespace: ai-services
spec:
  selector:
    matchLabels:
      app: inference-service
  rules:
  - from:
    - source:
        namespaces: ["microservices", "ai-services"]
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/inference/*", "/health"]
---
# Data services authorization
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: data-catalog-policy
  namespace: data-services
spec:
  selector:
    matchLabels:
      app: data-catalog-service
  rules:
  - from:
    - source:
        namespaces: ["microservices", "ai-services"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/catalog/*", "/health"]
---
# Destination rules for mTLS
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: default-mtls
  namespace: istio-system
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: microservices-mtls
  namespace: microservices
spec:
  host: "*.microservices.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        maxRequestsPerConnection: 10
    circuitBreaker:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: ai-services-mtls
  namespace: ai-services
spec:
  host: "*.ai-services.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        maxRequestsPerConnection: 5
    circuitBreaker:
      consecutiveGatewayErrors: 3
      interval: 60s
      baseEjectionTime: 60s
      maxEjectionPercent: 30
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: data-services-mtls
  namespace: data-services
spec:
  host: "*.data-services.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 200
      http:
        http1MaxPendingRequests: 100
        maxRequestsPerConnection: 20
    circuitBreaker:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
---
# Service entries for external services
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-database
  namespace: istio-system
spec:
  hosts:
  - database.external.com
  ports:
  - number: 5432
    name: postgres
    protocol: TCP
  location: MESH_EXTERNAL
  resolution: DNS
---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-ml-apis
  namespace: ai-services
spec:
  hosts:
  - api.openai.com
  - api.anthropic.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
# Virtual services for traffic management
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: auth-service-vs
  namespace: microservices
spec:
  hosts:
  - auth-service.microservices.svc.cluster.local
  http:
  - match:
    - uri:
        prefix: "/auth"
    route:
    - destination:
        host: auth-service.microservices.svc.cluster.local
        port:
          number: 8000
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: app-management-vs
  namespace: microservices
spec:
  hosts:
  - app-management-service.microservices.svc.cluster.local
  http:
  - match:
    - uri:
        prefix: "/api/v1/applications"
    route:
    - destination:
        host: app-management-service.microservices.svc.cluster.local
        port:
          number: 8080
    timeout: 60s
    retries:
      attempts: 3
      perTryTimeout: 20s
---
# Gateway configuration
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: aic-aipaas-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*.aic-aipaas.local"
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: aic-aipaas-tls
    hosts:
    - "*.aic-aipaas.local"
---
# Virtual service for ingress
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: aic-aipaas-ingress
  namespace: istio-system
spec:
  hosts:
  - "auth.aic-aipaas.local"
  - "app-management.aic-aipaas.local"
  - "ai.aic-aipaas.local"
  gateways:
  - aic-aipaas-gateway
  http:
  - match:
    - headers:
        host:
          exact: auth.aic-aipaas.local
    route:
    - destination:
        host: auth-service.microservices.svc.cluster.local
        port:
          number: 8000
  - match:
    - headers:
        host:
          exact: app-management.aic-aipaas.local
    route:
    - destination:
        host: app-management-service.microservices.svc.cluster.local
        port:
          number: 8080
  - match:
    - headers:
        host:
          exact: ai.aic-aipaas.local
    route:
    - destination:
        host: inference-service.ai-services.svc.cluster.local
        port:
          number: 8000
---
# Telemetry configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default-metrics
  namespace: istio-system
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        request_protocol:
          value: "http"
---
# Request authentication for JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-auth
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "https://auth.aic-aipaas.local"
    jwksUri: "https://auth.aic-aipaas.local/.well-known/jwks.json"
    audiences:
    - "aic-aipaas-api"
---
# Authorization policy for JWT-based access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: jwt-authorization
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  rules:
  - from:
    - source:
        requestPrincipals: ["https://auth.aic-aipaas.local/*"]
    to:
    - operation:
        paths: ["/api/*"]
  - to:
    - operation:
        paths: ["/auth/*", "/health", "/metrics"]
